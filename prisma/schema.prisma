
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(cuid())
  nickname String @unique
  email String @unique
  role Role @default(USER)

  posts Post[]
  comments Comment[]
  likes Like[]
  reports Report[]

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id String @id @default(cuid())
  provider Provider
  providerId String

  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Provider {
  EMAIL
  GOOGLE
  KAKAO
}

model Post {
  id String @id @default(cuid())
  title String
  content String

  author User @relation(fields: [authorId], references: [id])
  authorId String

  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  comments Comment[]
  likes Like[]
  views View[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id String @id @default(cuid())

  post Post @relation(fields: [postId], references: [id])
  postId String

  ipAddress String?
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(cuid())
  content String

  post Post @relation(fields: [postId], references: [id])
  postId String

  author User @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(cuid())

  post Post @relation(fields: [postId], references: [id])
  postId String

  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(cuid())
  name String @unique

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id String @id @default(cuid())
  content String

  type ReportType

  targetId String

  reporter User? @relation(fields: [reporterId], references: [id])
  reporterId String?
  ipAddress String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportType {
  POST
  COMMENT
}

enum Role {
  USER
  ADMIN
}